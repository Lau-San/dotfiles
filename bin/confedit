#!/bin/env bash

source "colors"

LOGFILE=$HOME/.local/share/conflog.txt

conf_path="$1"

git_dir="$HOME/.dotfiles"
work_tree="$HOME"

git_cmd="git --git-dir=$git_dir --work-tree=$work_tree"
lazygit_cmd="lazygit --git-dir=$git_dir --work-tree=$work_tree"

# Simple messages

msg() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	echo -e "$stdoutmsg"
    echo "$logmsg" > "$LOGFILE"
}
msg_nonewline() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	echo -en "$stdoutmsg"
    echo "$logmsg" > "$LOGFILE"
}

step() {
    stdoutmsg="$1"
    msg_nonewline "$cyan-> $stdoutmsg$default" "-> $stdoutmsg"
}
step_done(){
    echo -e "${green} DONE${default}"
}
step_failed(){
    echo -e "${red} FAILED${default}"
}
info() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	msg "$blue$stdoutmsg$default" "[INFO] $logmsg"
}
success() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	msg "$green$stdoutmsg$default" "[SUCCESS] $logmsg"
}
error() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	msg "$red$stdoutmsg. Check $LOGFILE for more details $default" "[ERROR] $logmsg"
}
prompt() {
    stdoutmsg="$1"
    echo -en "$purple$stdoutmsg$default " >&2
}

# Notifications

notif_cmd="notify-send --app-name=Dotfiles"
notify_success() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	$notif_cmd "Configuration update" "$stdoutmsg"
	success "$stdoutmsg" "$logmsg"
}
notify_error() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	$notif_cmd "Something went wrong" "$logmsg"
	error "$stdoutmsg" "$logmsg"
	exit 1
}
notify_error_lg() {
    stdoutmsg="$1"
    logmsg="${2:-"$1"}"
	$notif_cmd "Something went wrong" "$logmsg"
	error "$stdoutmsg" "$logmsg"
    prompt "Do you want to open Lazygit? [y/n]"
    read -r lg_response
    if [[ "${lg_response,,}" == "y" ]]; then
        $lazygit_cmd
        exit 0
    else
        exit 1
    fi
}

# Steps

edit_config() {
    if [[ -d "$conf_path" ]]; then
        cd "$conf_path" || notify_error "The path $1 is not a directory"
        nvim
    else
        nvim "$conf_path"
    fi
}

auto_commit() {
    commit_msg="$1"

    step "Staging changes..."
    $git_cmd add -u > "$LOGFILE" 2>&1
    if [[ $? -eq 0 ]]; then
        step_done
    else
        step_failed
        notify_error_lg "Couldn't stage changes"
    fi

    step "Commiting changes..."
    $git_cmd commit -m "$commit_msg" > "$LOGFILE" 2>&1
    if [[ $? -eq 0 ]]; then
        step_done
    else
        step_failed
        notify_error_lg "Couldn't commit changes"
    fi

    step "Pushing changes..."
    $git_cmd push > "$LOGFILE" 2>&1
    if [[ $? -eq 0 ]]; then
        step_done
    else
        step_failed
        notify_error_lg "Couldn't push changes"
    fi
    notify_success "All your configuration changes have been automatically pushed"
}

push_changes() {
    if [[ ! -e "$LOGFILE" ]]; then
        rm "$LOGFILE"
    fi

    echo "How do you want to proceed?"
    echo -e "${blue}[d]${default} Commit and push all changes with an autogenerated commit message"
    echo -e "${blue}[c]${default} Commit and push all changes with a custom commit message"
    echo -e "${blue}[m]${default} Manually manage repo with Lazygit"
    echo -e "${blue}[q]${default} Leave changes unstaged and exit"
    while true; do
        prompt "\n>"
        read -r res

        case "${res,,}" in
            d)
                auto_commit "Update $(date +"%Y-%m-%d %H:%M")"
                break
                # $git_cmd add -u &&
                #     $git_cmd commit -m "Update $(date +"%Y-%m-%d %H:%M")" && $git_cmd push &&
                #     success "All your configuration changes have been automatically pushed"
                ;;
            c)
                prompt "Enter your commit message:"
                read -r message
                auto_commit "$message"
                break
                ;;
            m)
                $lazygit_cmd
                break
                ;;
            q)
                exit 0
                ;;
            *)
                continue
        esac
    done
}

edit_config "$@"
push_changes
